<%
    local sys  = require "luci.sys"
    local util = require "luci.util"
    local http = require "luci.http"
    local disp = require "luci.dispatcher"

    local boardinfo = util.ubus("system", "board")

    local request  = disp.context.path
    local request2 = disp.context.request

    local category = request[1]
    local cattree  = category and disp.node(category)

    local leaf = request2[#request2]

    local tree = disp.node()
    local node = disp.context.dispatched

    local categories = disp.node_childs(tree)
    --local media = luci.config.main.mediaurlbase
    local media = " /luci-static/vzant"
    local fs = require "nixio.fs"
    local nutil = require "nixio.util"
    local uci = require 'luci.model.uci'.cursor()

    local c = tree
    local i, r

    -- tag all nodes leading to this page
    for i, r in ipairs(request) do
        if c.nodes and c.nodes[r] then
            c = c.nodes[r]
            c._menu_selected = true
        end
    end

    -- send as HTML5
    http.prepare_content("text/html")

    local function nodeurl(prefix, name, query)
        local u = url(prefix, name)
        if query then
            u = u .. http.build_querystring(query)
        end
        return pcdata(u)
    end


    local function utf8len(str)
        local len = 0
        local currentIndex = 1
        while currentIndex <= #str do
            local char = string.byte(str, currentIndex)
            currentIndex = currentIndex + chsize(char)
            len = len +1
        end
        return len
    end

    local function chsize(char)
        if not char then
            return 0
        elseif char > 240 then
            return 4
        elseif char > 225 then
            return 3
        elseif char > 192 then
            return 2
        else
            return 1
        end    
    end


    local function utf8sub(str, startChar, numChars)
        local startIndex = 1
        while startChar > 1 do
            local char = string.byte(str, startIndex)
            startIndex = startIndex + chsize(char)
            startChar = startChar - 1
        end

        local currentIndex = startIndex
        
        while numChars > 0 and currentIndex <= #str do
            local char = string.byte(str, currentIndex)
            currentIndex = currentIndex + chsize(char)
            numChars = numChars -1
        end
        return str:sub(startIndex, currentIndex - 1)
    end


    local function render_tabmenu(prefix, node, level)
        if not level then
            level = 1
        end

        local childs = disp.node_childs(node)
        if #childs > 0 then
            if level > 2 then
                write('<ul class="tabs">')
            end

            local selected_node
            local selected_name
            local i, v

            for i, v in ipairs(childs) do
                local nnode = node.nodes[v]
                if nnode._menu_selected then
                    selected_node = nnode
                    selected_name = v
                end

                if level > 2 then
                    write('<li class="tabmenu-item-%s %s"><a href="%s">%s</a></li>' %{
                        v, (nnode._menu_selected or (node.leaf and v == leaf)) and 'active' or '',
                        nodeurl(prefix, v, nnode.query),
                        striptags(translate(nnode.title))
                    })
                end
            end

            if level > 2 then
                write('</ul>')
            end

            if selected_node then
                render_tabmenu(prefix .. "/" .. selected_name, selected_node, level + 1)
            end
        end
    end

    local function render_submenu(prefix, node)
        local childs = disp.node_childs(node)
        if #childs > 0 then
            for i, r in ipairs(childs) do
                local nnode = node.nodes[r]
                local title = pcdata(striptags(translate(nnode.title)))
                write('<van-cell title="%s" data-title="%s"  data-url="%s" is-link></van-cell>' %{
                    title,
                    title,
                    nodeurl(prefix, r, nnode.query)
                })
            end
        end
    end


    local function render_topmenu()
        local childs = disp.node_childs(cattree)
        if #childs > 0 then
            for i, r in ipairs(childs) do
                local nnode = cattree.nodes[r]
                local grandchildren = disp.node_childs(nnode)
                if #grandchildren > 0 then
                    local title = pcdata(striptags(translate(nnode.title)))
                    write('<van-cell-group title="'..title..'">')
                    render_submenu(category .. "/" .. r, nnode)
                     write('</van-cell-group>')
                end
            end
        end
    end




      local function render_logout()
              local childs = disp.node_childs(cattree)
              if #childs > 0 then

                      for i, r in ipairs(childs) do
                              local nnode = cattree.nodes[r]
                              local grandchildren = disp.node_childs(nnode)

                              if #grandchildren <= 0 then
                                      local title = pcdata(striptags(translate(nnode.title)))

                                      write('<van-button type="primary" url="%s" block>%s</van-button>' %{
                                              nodeurl(category, r, nnode.query),
                                              title
                                      })
                              end
                      end

              end
      end


    local function render_changes()
        -- calculate the number of unsaved changes
        if tree.nodes[category] and tree.nodes[category].ucidata then
            local ucichanges = 0

            for i, j in pairs(require("luci.model.uci").cursor():changes()) do
                for k, l in pairs(j) do
                    for m, n in pairs(l) do
                        ucichanges = ucichanges + 1;
                    end
                end
            end

            if ucichanges > 0 then
                write('<van-button type="primary" url="%s?redir=%s" block>%s:<span class="badge bg-secondary">%d</span></van-button>' %{
                    url(category, 'uci/changes'),
                    http.urlencode(http.formvalue('redir') or table.concat(disp.context.request, "/")),
                    translate('Unsaved Changes'),
                    ucichanges
                })
            end
        end
    end
-%>

<!DOCTYPE html>
<html lang="zh-cn">
<head>
<meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover">
    <link href="favicon.ico" rel="shortcut icon"/>
    <link rel="stylesheet" href="<%=media%>/vant/index.css">
    <!--减少服务器的资源开销用了cdn,如果想全部使用自己的服务器的jquery,注释cdn的jquery和"js/qieh.js",取消注释"js/jquery.min.js"即可-->
    <script src="<%=media%>/js/jquery.js"></script>
    
    <script src="<%=resource%>/cbi.js"></script>
    <script src="<%=resource%>/xhr.js"></script>
    <script src="<%=media%>/js/jquery.touchSwipe.min.js"></script>
    <title><%=striptags( (boardinfo.hostname or "?") .. ( (node and node.title) and ' - ' .. translate(node.title) or '')) %> -
        LuCI</title>

        <style>.demo-home {
  box-sizing: border-box;
  width: 100%;
  min-height: 100vh;
  padding: 46px 20px 20px;
}
.demo-home__title,
.demo-home__desc {
  padding-left: 16px;
  font-weight: normal;
  line-height: 1;
  -webkit-user-select: none;
          user-select: none;
}
.demo-home__title {
  margin: 0 0 16px;
  font-size: 32px;
}
.demo-home__title img,
.demo-home__title span {
  display: inline-block;
  vertical-align: middle;
}
.demo-home__title img {
  width: 32px;
}
.demo-home__title span {
  margin-left: 16px;
}
.demo-home__title--small {
  font-size: 24px;
}
.demo-home__desc {
  margin: 0 0 10px;
  color: rgba(69, 90, 100, 0.6);
  font-size: 14px;
}
</style>
</head>
<body style="background:#f7f8fa;">
<div id="app" class="demo-home">
<van-popup v-model="show" position="bottom" :style="{ height: '30%', width:'100' }">
  <van-form>
      <van-field v-model="title"  label="标题"   placeholder="请输入标题" :rules="[{ required: true, message: '请填标题' }]"></van-field>
      <van-field v-model="src"    label="链接"   placeholder="请输入链接" :rules="[{ required: true, message: '请填链接' }]"></van-field>
      <div style="margin: 16px;">
        <van-button round block type="info" native-type="button" @click="onSubmit">提交</van-button>
      </div>
  </van-form>
</van-popup>
<h1 class="demo-home__title"><img src="<%=media%>/logo.png"><span><%=boardinfo.hostname or "?"%></span></h1>
<h2 class="demo-home__desc"> 一个自由、灵活的Linux 发行版 </h2>

 <% render_changes() %>
 <van-cell-group title="常用">
  <van-cell v-for="item in favourites" :title="item.title" :data-name="item.name" :data-title="item.title" :data-url="item.src" is-link></van-cell>
  </van-cell-group>
 <% render_topmenu() %>
  <van-cell-group title="主题设置">
  <van-cell  title="首页显示" url='<%=luci.dispatcher.build_url("admin","status","vzant", "show")%>' is-link></van-cell>
  <van-cell  title="首页隐藏" url='<%=luci.dispatcher.build_url("admin","status","vzant", "hide")%>' is-link></van-cell>
  </van-cell-group>
 <% render_logout() %>


</div>
<script src="<%=media%>/js/vue.min.js"></script>
<script src="<%=media%>/vant/vant.min.js"></script>
<script type="text/javascript">

var app = new Vue({
      el: '#app',
      data() {
        return {
          title:'',
          src:'',
          show: false,
          favourites:[]
        };
      },
      methods: {
        showPopup:function(title,src) {
          this.show = true;
          this.title = title;
          this.src = src;
        },
        onSubmit: function (values) {
          saveFavourite(this.title,this.src);
        },
        handleAdd: function (title,src,result) {
          var favourite={name:result.msg,title:title,src:src};
          this.favourites.push(favourite);
          this.title = '';
          this.src = '';
          this.show = false;
          setTimeout(function(){ fBind();},500);
        },
        deleteFavourite:function(name){
          var that = this ;
          that.$dialog.confirm({
            title: '友情提示',
            message: '您正在删除常用操作！！！',
          }).then(() => {
            $.ajax({
             url:'<%=luci.dispatcher.build_url("admin","status","vzant", "delfavourite")%>',
             dataType:'json',
             method:'post',
             data:{
                name:name
            },
            success:function(r){
                for( var i=0;i<that.favourites.length;i++){
                    if(that.favourites[i].name == name){
                       that.favourites.splice(i, 1);
                    }
                }
                setTimeout(function(){ fBind();},500);
             },
             error:function(XMLHttpRequest, textStatus, errorThrown){
               alert(XMLHttpRequest.status);
               alert(XMLHttpRequest.readyState);
               }
             });
            })
            .catch(() => {
              // on cancel
            });
        },
        handleFavourites:function(objs){
          this.favourites = objs;
          setTimeout(function(){ fBind();},500);
          // var that = this ;
          //   for(var i=0;i<objs.length;i++){//遍历json数组时，这么写p为索引，0,1
          //      var favourite={name:objs[i].name,title:objs[i].title,src:objs[i].src};
          //      that.favourites.push(favourite);
          //   }
        }
      }
    });


function saveFavourite(title,src){
    $.ajax({
         url:'<%=luci.dispatcher.build_url("admin","status","vzant", "addfavourite")%>',
         dataType:'json',
         method:'post',
         data:{
            title:title,
            src:src
        },
         success:function(r){
            console.log(r);
            app.handleAdd(title,src,r);
         },
         error:function(XMLHttpRequest, textStatus, errorThrown){
           alert(XMLHttpRequest.status);
           alert(XMLHttpRequest.readyState);
           }
         });

}


function getFavourites(){
   $.ajax({
         url:'<%=luci.dispatcher.build_url("admin","status","vzant", "getfavourites")%>',
         dataType:'json',
         method:'post',
         data:{},
         success:function(r){
            app.handleFavourites(r);
         },
         error:function(XMLHttpRequest, textStatus, errorThrown){
           alert(XMLHttpRequest.status);
           alert(XMLHttpRequest.readyState);
           }
         });
}



function fBind(){
    $(".van-cell[data-name]").swipe("destroy");
    $(".van-cell[data-name]").swipe( {
            longTap:function(event, target) {
              var src = $(this).attr('data-url');
              window.location.href=src;
            },
            swipeLeft:function(event, target) {
              var name = $(this).attr('data-name');
              app.deleteFavourite(name);
            },
            triggerOnTouchLeave:true,
            threshold:50,
            longTapThreshold:50
      });
}

function cBind(){
     $(".van-cell").not("[data-name]").swipe( {
            longTap:function(event, target) {
              var src = $(this).attr('data-url');
              window.location.href=src;
            },
            swipeLeft:function(event, target) {
              var title = $(this).attr('data-title');
              var src = $(this).attr('data-url');
              app.showPopup(title,src);
            },
            triggerOnTouchLeave:true,
            threshold:50,
            longTapThreshold:50
      });
}



$(function() {
  getFavourites();
   cBind();
})
</script>
</body>

</html>
